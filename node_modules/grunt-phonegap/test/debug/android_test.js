(function() {
  var fs, grunt, helpers, path, pkg;

  grunt = require('grunt');

  pkg = grunt.file.readJSON('package.json');

  path = require('path');

  fs = require('fs');

  helpers = require(path.join(__dirname, '..', '..', 'tasks', 'helpers'))(grunt);

  if (helpers.canBuild('android')) {
    exports.phonegap = {
      'tree should be created': function(test) {
        test.expect(1);
        test.ok(grunt.file.isDir('test/releases/debug/android'), 'should create the debug releases platform directory');
        return test.done();
      },
      'unsigned apk should be created': function(test) {
        var apk;
        test.expect(2);
        apk = path.join('test', 'phonegap', 'platforms', 'android', 'bin', 'TestFixtureApp-debug.apk');
        test.ok(grunt.file.isFile(apk), "" + apk + " does not exist");
        return fs.stat(apk, (function(_this) {
          return function(err, stats) {
            test.notEqual(stats.size, 0, "" + apk + " is an empty file");
            return test.done();
          };
        })(this));
      },
      'unsigned apk should be copied': function(test) {
        var apk;
        test.expect(2);
        apk = path.join('test', 'releases', 'debug', 'android', 'TestFixtureApp-0.0.0.apk');
        test.ok(grunt.file.isFile(apk), "" + apk + " does not exist");
        return fs.stat(apk, (function(_this) {
          return function(err, stats) {
            test.notEqual(stats.size, 0, "" + apk + " is an empty file");
            return test.done();
          };
        })(this));
      }
    };
  }

}).call(this);
