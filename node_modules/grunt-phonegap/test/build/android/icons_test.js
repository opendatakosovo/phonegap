(function() {
  var grunt, hash_file, helpers, icons, orig, path, res, tests;

  grunt = require('grunt');

  path = require('path');

  hash_file = require('hash_file');

  helpers = require(path.join(__dirname, '..', '..', '..', 'tasks', 'helpers'))(grunt);

  if (helpers.canBuild('android')) {
    tests = {};
    orig = path.join('test', 'fixtures', 'www');
    res = path.join('test', 'phonegap', 'platforms', 'android', 'res');
    icons = [[path.join(orig, 'icon-96-xhdpi.png'), path.join(res, 'drawable', 'icon.png')], [path.join(orig, 'icon-36-ldpi.png'), path.join(res, 'drawable-ldpi', 'icon.png')], [path.join(orig, 'icon-48-mdpi.png'), path.join(res, 'drawable-mdpi', 'icon.png')], [path.join(orig, 'icon-72-hdpi.png'), path.join(res, 'drawable-hdpi', 'icon.png')], [path.join(orig, 'icon-96-xhdpi.png'), path.join(res, 'drawable-xhdpi', 'icon.png')], [path.join(orig, 'icon-144-xxhdpi.png'), path.join(res, 'drawable-xxhdpi', 'icon.png')], [path.join(orig, 'icon-192-xxxhdpi.png'), path.join(res, 'drawable-xxxhdpi', 'icon.png')]];
    icons.forEach(function(pair) {
      return tests["android icon " + pair[0]] = function(test) {
        test.expect(3);
        test.ok(grunt.file.isFile(pair[0]), "" + pair[0] + " does not exist");
        test.ok(grunt.file.isFile(pair[1]), "" + pair[1] + " does not exist");
        return hash_file(pair[0], 'sha1', (function(_this) {
          return function(err, src) {
            return hash_file(pair[1], 'sha1', function(err, dest) {
              test.equal(dest, src, "hash should match for " + pair[0] + " => " + pair[1]);
              return test.done();
            });
          };
        })(this));
      };
    });
    exports.group = tests;
  }

}).call(this);
